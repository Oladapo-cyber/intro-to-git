img {
  height: 200px;
  border-radius: 50%;
}

body {
  background-color: rgb(214, 220, 220);
  margin: 0;
  cursor: url("./Images/move.png"), pointer;
}

/* p,
a,
h1 {
  color: chartreuse;
  font-size: 20px;
} */

#navbar {
  padding: 20px;
  background-color: darkorange;
  display: flex;
  justify-content: space-between;
}

.logo {
  height: 50px;
  width: 50px;
  border-radius: 50%;
}

.right {
  display: flex;
  align-items: center;
  gap: 8rem;
}

.right > div {
  display: flex;

  gap: 20px;
}

.navLink {
  text-decoration: none;
  margin-left: 10px;
  cursor: url("./Images/move.png"), pointer;
  color: white;
  text-transform: capitalize;
}

.navLink:hover {
  text-decoration: underline;
  font-weight: bolder;
  color: #fd4601;
}

#estimateBtn {
  border: 1px solid black;
  padding: 10px 18px;
  font-weight: 600;
  background-color: #ededed;
  color: #fd4601;
  text-transform: uppercase;
  border-radius: 25px;
  cursor: url("./Images/move.png"), pointer;
}

#estimateBtn:hover {
  background-color: black;
  font-weight: 700;
  color: white;
  /* The commented out transition property has a 200ms delay meaning it would take 200ms before the transition would activate, which isn't necessary in this case. */
  /* transition: 500ms linear 200ms; */

  transition: 500ms linear;
}

/* Descendant combinator: Targets both child or grandchildren of a tag. */
.box p {
  color: red;
}

/* Child combinator targets only the direct children of the tag, using the > sign */
.box > p {
  color: blue;
}

/* Adjacent sibling selector. It's used to select an element that is the direct sibling of the specified element*/

.box + p {
  color: green;
  font-size: larger;
}

#text {
  text-align: left;
  line-height: 40px;
  word-spacing: 10px;
  letter-spacing: 2px;
}

.cButton {
  background-color: hsl(180, 10%, 26%);
  padding: 10px;
  color: white;
  border: 2px solid black;
  border-radius: 20px;
  font-weight: bold;
  margin: 10px;
  text-transform: uppercase;
  letter-spacing: 100px;
}

.cButton:hover {
  background-color: rgb(61, 38, 38);
  color: cyan;
  transition: 500ms linear;
}

.box1 {
  background-color: red;
  height: 3rem;
  width: 3rem;
  /*   display: inline-block; */
}

.box2 {
  background-color: green;
  height: 3rem;
  /* The below margin property is used to specify value for the top and bottom and the 0 means there should be no margin for left and right */
  /* margin: 10px 0; */
  width: 3rem;
  /* Display none, used to remove the property and it's space completely */
  /*  display: none; */
  /* This is used to make an element invisible but it would still retain the space meant for the element. */
  /* visibility: hidden; */
  /* display: inline; */
  /*   display: inline-block; */
}

.box3 {
  background-color: blue;
  height: 4rem;
  width: 3rem;
  /*   display: inline-block; */
}

.flexbox {
  background-color: grey;
  display: flex;
  /* column is the y axis */
  flex-direction: row;
  height: 100vh;
  flex-wrap: wrap;
  width: 30vw;
  justify-content: center;
  justify-content: space-evenly;
  align-items: last baseline;
  gap: 20px;
}

.flexbox1 {
  background-color: aquamarine;
  height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
}
